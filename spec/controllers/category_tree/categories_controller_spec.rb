require 'rails_helper'
# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

module CategoryTree
  RSpec.describe CategoriesController, :type => :controller do

    # This should return the minimal set of attributes required to create a valid
    # Category. As you add validations to Category, be sure to
    # adjust the attributes here as well.
    let(:valid_attributes) do
      attributes_for(:category)
    end

    let(:invalid_attributes) do
      { :code => '', :name => '' }
    end

    # This should return the minimal set of values that should be in the session
    # in order to pass any filters (e.g. authentication) defined in
    # CategoriesController. Be sure to keep this updated too.
    let(:valid_session) { {} }

    routes { CategoryTree::Engine.routes }

    describe 'GET index' do
      it 'assigns root categories as @categories' do
        get :index, {}, valid_session
        expect(assigns(:categories)).to eq(Category.roots)
      end
    end

    describe 'GET show' do
      it 'assigns the requested category as @category' do
        category = create(:category)
        get :show, { :id => category.to_param }, valid_session
        expect(assigns(:category)).to eq(category)
      end
    end

    describe 'GET edit' do
      it 'assigns the requested category as @category' do
        category = create(:category)
        get :edit, { :id => category.to_param }, valid_session
        expect(assigns(:category)).to eq(category)
      end
    end

    describe 'POST create' do
      describe 'with valid params' do
        it 'creates a new Category' do
          expect do
            post :create, { :category => valid_attributes }, valid_session
          end.to change(Category, :count).by(1)
        end

        it 'assigns a newly created category as @category' do
          post :create, { :category => valid_attributes }, valid_session
          expect(assigns(:category)).to be_a(Category)
          expect(assigns(:category)).to be_persisted
        end

        it 'redirects to the created category' do
          post :create, { :category => valid_attributes }, valid_session
          expect(response).to redirect_to(Category.last)
        end
      end

      describe 'with invalid params' do
        it 'assigns a newly created but unsaved category as @category' do
          post :create, { :category => invalid_attributes }, valid_session
          expect(assigns(:category)).to be_a_new(Category)
        end

        it "re-renders the 'new' template" do
          post :create, { :category => invalid_attributes }, valid_session
          expect(response).to render_template('new')
        end
      end
    end

    describe 'PUT update' do
      describe 'with valid params' do
        let(:new_attributes) do
          { :name => 'New Category' }
        end

        it 'updates the requested category' do
          category = create(:category)
          put :update, { :id => category.to_param, :category => new_attributes }, valid_session
          category.reload
          expect(category.name).to be_eql(new_attributes[:name])
        end

        it 'assigns the requested category as @category' do
          category = create(:category)
          put :update, { :id => category.to_param, :category => valid_attributes }, valid_session
          expect(assigns(:category)).to eq(category)
        end

        it 'redirects to the category' do
          category = create(:category)
          put :update, { :id => category.to_param, :category => valid_attributes }, valid_session
          expect(response).to redirect_to(category)
        end
      end

      describe 'with invalid params' do
        it 'assigns the category as @category' do
          category = create(:category)
          put :update, { :id => category.to_param, :category => invalid_attributes }, valid_session
          expect(assigns(:category)).to eq(category)
        end

        it "re-renders the 'edit' template" do
          category = create(:category)
          put :update, { :id => category.to_param, :category => invalid_attributes }, valid_session
          expect(response).to render_template('edit')
        end
      end
    end

    describe 'DELETE destroy' do
      it 'destroys the requested category' do
        category = create(:category)
        expect do
          delete :destroy, { :id => category.to_param }, valid_session
        end.to change(Category, :count).by(-1)
      end

      it 'redirects to the categories list' do
        category = create(:category)
        delete :destroy, { :id => category.to_param }, valid_session
        expect(response).to redirect_to(categories_path)
      end
    end

  end
end
